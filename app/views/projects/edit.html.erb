<script type="text/javascript">

	function btnDelete(value, metaData, record, rowIndex, colIndex, store){
		var ret =  '<div align="center">'+
					'<a href="#" onclick="deleteUserRoleByRecordId(\'' + record.id + '\')">'+
						'<img src="../images/Recycle_empty.png" title="Delete" alt="Delete" ></img>'+
					'</a>'+
				'</div>';
		return ret;
	}

	function deleteUserRoleByRecordId(id){
		var r = store_UsersProjects.getById(id);
		store_UsersProjects.remove(r);
	}

	var store_combo_NetworkOwners = createStore('/companies/store/grid',
											['id', 'name'],
											[
												{name: 'id',  mapping: 'id'},
												{name: 'name',  mapping: 'name'}
											]);

	var store_combo_Customers = createStore('/companies/store/grid',
											['id', 'name'],
											[
												{name: 'id',  mapping: 'id'},
												{name: 'name',  mapping: 'name'}
											]);

    store_combo_NetworkOwners.on('load', function(){
		comboNetworkOwners.setValue('<%= @project.network_owner_id %>');
		this.purgeListeners();
	});

    store_combo_Customers.on('load', function(){
    	comboCustomers.setValue('<%= @project.customer_id %>');
		this.purgeListeners();
	});

    store_combo_NetworkOwners.load();
    store_combo_Customers.load();

	var store_combo_Users =
	createStore(
		'/users/store/grid', ['id', 'name'],
		[
			{name: 'id',  mapping: 'id'},
			{name: 'name',  mapping: 'name'}
		]
	);

	var store_UsersProjects = createStore(
		'/users_projects/store/<%= @project.id %>',
		['id', 'name'],
		[
			{name: 'id',  mapping: 'id'},
			{name: 'user_id',  mapping: 'user_id'},
			{name: 'user_name',  mapping: 'user_name'},
			{name: 'role_id',  mapping: 'role_id'},
			{name: 'role_name',  mapping: 'role_name'},
			{name: 'company_description',  mapping: 'company_description'},
			{name: 'contact_phone',  mapping: 'contact_phone'},
			{name: 'comments',  mapping: 'comments'}

		]
	);

	store_UsersProjects.load();

	var cols =
	[
		{header: 'Name', dataIndex: 'user_name', sortable: false, menuDisabled: true, width: 190},
		{header: 'Role', dataIndex: 'role_name', sortable: false, menuDisabled: true, width: 75},
		{header: 'Company desc.', dataIndex: 'company_description', sortable: false, menuDisabled: true, width: 100},
		{header: 'Phone', dataIndex: 'contact_phone', sortable: false, menuDisabled: true, width: 75},
		{header: 'Comments', dataIndex: 'comments', sortable: false, menuDisabled: true, width: 175},
  		{renderer: btnDelete, width: 40}
	];

  	var gridUsersRoles =
	new Ext.grid.GridPanel({
			autoHeight: true,
			autoWidth: true,
			border: true,
			title: null,
			store: store_UsersProjects,
       		loadMask: true,
      		columns: cols,
	        tbar:[
	        	{
		            text: 'Add',
	                iconCls: 'addNewIcon',
		            handler : function(){
					var userAdd = new Ext.Window({
						id: 'user_add',
						title: 'Add User',
						closeAction: 'close',
                        autoScroll: true,
						modal: true,
						resizable: false,
						listeners: {
							show: function(){
								this.setWidth(430);
								this.setHeight(132);
							}
						},
						buttons: [
							{text: 'OK', handler:
								function(){
									if(Ext.getCmp('form_add_users_roles').getForm().isValid()){
						                var r = new Ext.data.Record(
						                	{
						                		id: 0,
						                		user_id: Ext.getCmp('envolved_combo_users').getValue(),
						                		user_name: Ext.getCmp('envolved_combo_users').getRawValue(),
						                		role_id: Ext.getCmp('envolved_combo_roles').getValue(),
						                		role_name: Ext.getCmp('envolved_combo_roles').getRawValue()
					                		}
						                );
						                store_UsersProjects.insert(store_UsersProjects.getCount(), r);
						                userAdd.close();
									}
								}
							},
							{text: 'Cancel', handler: function(){ userAdd.close(); }}
						],

						items:[
							new Ext.form.FormPanel({
								id: 'form_add_users_roles',
						      	frame:true,
								title: '',
								bodyStyle: 'padding:2px 2px 0',
								style: "margin: 0px auto 0px auto;",
								autoWidth: true,
								autoHeight: true,
								monitorValid: true,
								items:[
									new Ext.form.ComboBox({
										id: 'envolved_combo_users',
										fieldLabel: 'User',
										valueField: 'id',
										displayField: 'name',
										editable: true,
										emptyText: 'Select a Professional...',
										store: store_combo_Users,
										mode: 'remote',
										selectOnFocus: true,
										forceSelection: true,
										triggerAction: 'all',
										minChars: 3,
										allowBlank: false,
										width: 275
									}),
									new Ext.form.ComboBox ({
										id: 'envolved_combo_roles',
									    fieldLabel: 'Role',
									    store: [[0, 'Admin'], [1, 'User'], [2, 'Consultant']],
									    typeAhead: true,
									    mode: 'local',
									    forceSelection: true,
									    triggerAction: 'all',
									    selectOnFocus: true,
									    allowBlank: false,
										editable: false,
										width: 275
									})
								]
							})
						]
					});
					userAdd.show();
	            }
	        },
			'-',
	        	{
		            text: 'Add contacts',
	                iconCls: 'addNewIcon',
		            handler : function(){
					var contactAdd_<%= @project.id %> = new Ext.Window({
						id: 'contact_user_add_<%= @project.id %>',
						title: 'Add contacts',
						closeAction: 'close',
                        autoScroll: true,
						modal: true,
						resizable: false,
						listeners: {
							show: function(){
								this.setWidth(430);
								this.setHeight(184);
							}
						},
						buttons: [
							{text: 'OK', handler:
								function(){
									if(Ext.getCmp('form_add_contacts_<%= @project.id %>').getForm().isValid()){
						                var r = new Ext.data.Record(
						                	{
						                		id: 0,
						                		user_name: Ext.getCmp('envolved_contacts_name_<%= @project.id %>').getValue(),
						                		role_id: 0,
						                		role: '-',
												company_description: Ext.getCmp('envolved_contacts_company_<%= @project.id %>').getRawValue(),
												contact_phone: Ext.getCmp('envolved_contacts_phone_<%= @project.id %>').getRawValue(),
												comments: Ext.getCmp('envolved_contacts_comments_<%= @project.id %>').getRawValue()
					                		}
						                );
						                store_UsersProjects.insert(store_UsersProjects.getCount(), r);
						                contactAdd_<%= @project.id %>.close();
									}
								}
							},
							{text: 'Cancel', handler: function(){ contactAdd_<%= @project.id %>.close(); }}
						],
						items:[
							new Ext.form.FormPanel({
								id: 'form_add_contacts_<%= @project.id %>',
						      	frame:true,
								title: '',
								bodyStyle: 'padding:2px 2px 0',
								style: "margin: 0px auto 0px auto;",
								autoWidth: true,
								autoHeight: true,
								monitorValid: true,
								items:[
									new Ext.form.TextField({
										id: 'envolved_contacts_name_<%= @project.id %>',
										fieldLabel: 'Name',
										allowBlank: false,
										width: 250
									}),
									new Ext.form.TextField({
										id: 'envolved_contacts_company_<%= @project.id %>',
										fieldLabel: 'Company desc.',
										allowBlank: false,
										width: 250
									}),
									new Ext.form.TextField({
										id: 'envolved_contacts_phone_<%= @project.id %>',
										fieldLabel: 'Phone',
										allowBlank: false,
										width: 250
									}),
									new Ext.form.TextField({
										id: 'envolved_contacts_comments_<%= @project.id %>',
										fieldLabel: 'Comments',
										allowBlank: false,
										width: 250
									}),
								]
							})
						]
					});
					contactAdd_<%= @project.id %>.show();
	            }
	        },
			'-',
			{
		        text: 'Remove',
		        cls: 'btnRemover',
				handler: function() {
					var selectionModel = gridUsersRoles.getSelectionModel();
					var selectedRow = selectionModel.getSelected();
					if (selectedRow) {
		                var selIdx = gridUsersRoles.store.indexOf(selectedRow);
						gridUsersRoles.getStore().remove(selectedRow);
						selectionModel.selectRow(selIdx);
					}
				}
		    }
    	],
		stripeRows: true
	});

	var comboNetworkOwners = new Ext.form.ComboBox({
			fieldLabel: 'Network Owner',
			valueField: 'id',
			displayField: 'name',
			name: 'project[network_owner_id]',
			hiddenName: 'project[network_owner_id]',
			editable: true,
			emptyText: 'select a owner...',
			store: store_combo_NetworkOwners,
			mode: 'remote',
			selectOnFocus: true,
			forceSelection: true,
			triggerAction: 'all',
			minChars: 3,
			allowBlank: false,
			width: 200,
		});

	var comboCustomers = new Ext.form.ComboBox({
			fieldLabel: 'Customer',
			valueField: 'id',
			displayField: 'name',
			name: 'project[customer_id]',
			hiddenName: 'project[customer_id]',
			editable: true,
			emptyText: 'select a customer...',
			store: store_combo_Customers,
			mode: 'remote',
			selectOnFocus: true,
			forceSelection: true,
			triggerAction: 'all',
			minChars: 3,
			allowBlank: false,
			width: 200,
			value: <%= @project.customer_id %>
		});

	var statusCombo = new Ext.form.ComboBox ({
		    fieldLabel: 'Status',
		    store: [['1', 'Planned'],['2', 'In execution'],['3', 'Finished']],
		    typeAhead: true,
		    mode: 'local',
		    forceSelection: true,
		    triggerAction: 'all',
		    selectOnFocus: true,
		    hiddenName: 'project[status]',
		    allowBlank: false,
			editable: false,
			width: 130,
			value: '<%= @project.status %>'
		});

    var form_editProjects_<%= @project.id %> = new Ext.FormPanel({
        frame:true,
        title: 'Edit the Project using the form below',
        bodyStyle:'padding:5px 5px 0',
        style: "margin: 0px auto 0px auto;",
        width: 700,
        monitorValid: true,
 		items:[{xtype:"fieldset",
		    	autoHeight:true,
		    	items:[{layout: 'column',
						items:[{labelWidth: 50,
								columnWidth:0.68,
								layout:'form',
								items:[{xtype:"textfield", fieldLabel: 'Name', name: 'project[name]', allowBlank:false, width: 360, value: '<%= @project.name %>'}
								      ]
							   },
							   {labelWidth: 50,
								columnWidth:0.32,
								layout:'form',
								items:[statusCombo]
							  }]
					   },
		      		   {layout:"column",
			        	items:[{columnWidth:0.55,
			            		layout:"form",
			            		items:[comboNetworkOwners,
	            					   {xtype:'datefield', fieldLabel:"Begin date", name:"project[begin_date]", width:200, value: '<%= @project.begin_date %>'}
	            				      ]
			         		   },
			         		   {labelWidth: 66,
			         		    columnWidth:0.45,
			            		layout:"form",
			            		items:[comboCustomers,
			            			   {xtype:'datefield', fieldLabel:"End date", name:"project[end_date]", width:200, value: '<%= @project.end_date %>'}
			            		      ]
		          			  }]
	      			  },
		      		   {layout:"column",
		      		    labelWidth: 70,
			            layout:"form",
			        	items:[{xtype:"textarea", fieldLabel:"Project Description", name:"project[description]", heigth:20,width:556, value: '<%= @project.description %>'}]
	      			  }]
			   },
			   {
			   	xtype:"fieldset",
				title:"Tests Configuration",
				autoHeight:true,
				labelWidth: 15,
				items:[
					{
						layout:"column",
			        	items:[
							{
								columnWidth:0.33,
			            		layout:"form",
			            		items:[
									{
										boxLabel: 'Attenuation (1310)',
							    		xtype: 'checkbox',
							    		name: 'project[has_test_attenuation_1310]',
							    		checked: <%= @project.has_test_attenuation_1310 %>,
								    	inputValue: true
									}
								]
							},
							{
								columnWidth:0.33,
			            		layout:"form",
			            		items:[
									{
										boxLabel: 'OTDR (Standard)',
								    	xtype: 'checkbox',
								    	name: 'project[has_test_otdr_standard]',
								    	checked: <%= @project.has_test_otdr_standard %>,
									    inputValue: true
									}
								]
							},
							{
								columnWidth:0.33,
			            		layout:"form",
			            		items:[
									{
										boxLabel: 'PMD (10 min)',
								    	xtype: 'checkbox',
								    	name: 'project[has_test_pmd_10_min]',
								    	checked: <%= @project.has_test_pmd_10_min %>,
									    inputValue: true
									}
								]
							}
					   	]
					},
					{
						layout:"column",
		        		items:[
							{
								columnWidth:0.33,
			            		layout:"form",
			            		items:[
									{
										boxLabel: 'Attenuation (1550)',
								    	xtype: 'checkbox',
								    	name: 'project[has_test_attenuation_1550]',
								    	checked: <%= @project.has_test_attenuation_1550 %>,
									    inputValue: true
						      		}
								]
							},
							{
								columnWidth:0.33,
								layout:"form",
								items:[
									{
										boxLabel: 'OTDR (Premium)',
								    	xtype: 'checkbox',
								    	name: 'project[has_test_otdr_premium]',
								    	checked: <%= @project.has_test_otdr_premium %>,
									    inputValue: true
							  		}
								]
							},
							{
								columnWidth:0.33,
			            		layout:"form",
			            		items:[
									{
										boxLabel: 'PMD (60 min)',
								    	xtype: 'checkbox',
								    	name: 'project[has_test_pmd_60_min]',
								    	checked: <%= @project.has_test_pmd_60_min %>,
									    inputValue: true
						      		}
								]
							}
				   		]
			   		},
					{
						layout:"column",
		        		items:[
							{
								columnWidth:0.33,
			            		layout:"form",
			            		items:[
									{
										boxLabel: 'Chromatic Dispersion',
								    	xtype: 'checkbox',
								    	name: 'project[has_test_chromatic]',
								    	checked: <%= @project.has_test_chromatic %>,
									    inputValue: true
						      		}
								]
							},
							{
								columnWidth:0.33,
								layout:"form",
								items:[
									{
										boxLabel: 'ORL',
								    	xtype: 'checkbox',
								    	name: 'project[has_test_orl]',
								    	checked: <%= @project.has_test_orl %>,
									    inputValue: true
							  		}
								]
							},
							{
								columnWidth:0.33,
			            		layout:"form",
			            		items:[
									{
										boxLabel: 'Site Survey',
								    	xtype: 'checkbox',
								    	name: 'project[has_test_site_survey]',
								    	checked: <%= @project.has_test_site_survey %>,
									    inputValue: true
						      		}
								]
							}
				   		]
			   		}

			  	]
			},
			  {xtype:"fieldset",
					title:"People envolved",
					autoHeight:true,
					labelWidth: 1,
					items: [gridUsersRoles]
  			  },
  		  ],
        buttons:[
        		{
        			text: 'Update',
                	handler:function(){
	                 	var usersArr = [];
		                store_UsersProjects.each(function(record) {
		                    record.commit();
		                    usersArr.push(record.data)
		                });

						var params_add = {users_projects: Ext.encode(usersArr)};

	                    if (form_editProjects_<%= @project.id %>.getForm().isValid()){
	                    	form_editProjects_<%= @project.id %>.getForm().submit({
	                    		params: params_add,
	                         	url:'/projects/update/<%= @project.id %>',
	                            waitMsg:'Saving Data...',
	                            success: function(){
	                            	Ext.Msg.alert('Project updated','The project has been successfully updated');
									updateSubTab('tab_projects','sub_tab_projects', 'Projects','<%= projects_path %>');
									closeSubTab('tab_projects','sub_tab_projects_show_<%= @project.id %>');
									closeSubTab('tab_projects','sub_tab_projects_edit_<%= @project.id %>');
                            	},
	                            failure: function(){Ext.Msg.alert('Error','There has been a problem while creating this request! Contact the system administrator.')}
							});
	                    }
					}
				},
                 {text: 'Cancel',
                  handler:function(){closeSubTab('tab_projects','sub_tab_projects_edit_<%= @project.id %>');}
                }]
    });

    form_editProjects_<%= @project.id %>.render( 'area_form_editProjects_<%= @project.id %>');

</script>
<br />
<div id="area_form_editProjects_<%= @project.id %>" style="float:left;">
</div>