<script type="text/javascript">

	var store_combo_NetworkOwners = createStore(	'/companies/store/grid',
											['id', 'name'],
											[
												{name: 'id',  mapping: 'id'},
												{name: 'name',  mapping: 'name'}
											]);

	var store_combo_Customers = createStore('/companies/store/grid',
											['id', 'name'],
											[
												{name: 'id',  mapping: 'id'},
												{name: 'name',  mapping: 'name'}
											]);

	var store_combo_Users =
	createStore(
		'/users/store/grid',
		['id', 'name'],
		[
			{name: 'id', mapping: 'id'},
			{name: 'name', mapping: 'name'},
			{name: 'company_description', mapping: 'company_description'},
			{name: 'contact_phone', mapping: 'contact_phone'},
			{name: 'comments', mapping: 'comments'}
		]
	);

	var comboNetworkOwners = new Ext.form.ComboBox({
		fieldLabel: 'Network Owner',
		valueField: 'id',
		displayField: 'name',
		name: 'project[metwork_owner_id]',
		hiddenName: 'project[network_owner_id]',
		editable: true,
		emptyText: 'select an owner...',
		store: store_combo_NetworkOwners,
		mode: 'remote',
		selectOnFocus: true,
		forceSelection: true,
		triggerAction: 'all',
		minChars: 3,
		allowBlank: false,
		width: 200
	});

	var comboCustomers = new Ext.form.ComboBox({
		fieldLabel: 'Customer',
		valueField: 'id',
		displayField: 'name',
		name: 'project[customer_id]',
		hiddenName: 'project[customer_id]',
		editable: true,
		emptyText: 'select a customer...',
		store: store_combo_Customers,
		mode: 'remote',
		selectOnFocus: true,
		forceSelection: true,
		triggerAction: 'all',
		minChars: 3,
		allowBlank: false,
		width: 200
	});

	var statusCombo = new Ext.form.ComboBox ({
	    fieldLabel: 'Status',
	    store: [['p', 'Planned'],['e', 'In execution'],['f', 'Finished']],
	    typeAhead: true,
	    mode: 'local',
	    forceSelection: true,
	    triggerAction: 'all',
	    selectOnFocus: true,
	    hiddenName: 'project[status]',
	    allowBlank: false,
		editable: false,
		width: 130
	});

	var cols =
		[
			{header: 'Name', dataIndex: 'name', sortable: false, menuDisabled: true, width: 200},
			{header: 'Role', dataIndex: 'role', sortable: false, menuDisabled: true, width: 125},
			{header: 'Company desc.', dataIndex: 'company_description', sortable: false, menuDisabled: true, width: 100},
			{header: 'Phone', dataIndex: 'contact_phone', sortable: false, menuDisabled: true, width: 75},
			{header: 'Comments', dataIndex: 'comments', sortable: false, menuDisabled: true, width: 175}
		];

    var local_usersStore =
        new Ext.data.Store({
            autoload: false,
            fields: ['id', 'name', 'company_description', 'contact_phone', 'comments', 'role_id', 'role']
    });

  	var gridUsersRoles =
	new Ext.grid.GridPanel({
			autoHeight: true,
			autoWidth: true,
			border: true,
			title: null,
			store: local_usersStore,
      		loadMask: true,
      		columns: cols,
			stripeRows: true,
	        tbar:[
	        	{
		            text: 'Add users',
	                iconCls: 'addNewIcon',
		            handler : function(){
					var userAdd = new Ext.Window({
						id: 'user_add',
						title: 'Add User',
						closeAction: 'close',
                        autoScroll: true,
						modal: true,
						resizable: false,
						listeners: {
							show: function(){
								this.setWidth(430);
								this.setHeight(132);
							}
						},
						buttons: [
							{text: 'OK', handler:
								function(){
									if(Ext.getCmp('form_add_users_roles').getForm().isValid()){
						                var r = new Ext.data.Record(
						                	{
						                		id: Ext.getCmp('envolved_combo_users').getValue(),
						                		name: Ext.getCmp('envolved_combo_users').getRawValue(),
						                		role_id: Ext.getCmp('envolved_combo_roles').getValue(),
						                		role: Ext.getCmp('envolved_combo_roles').getRawValue(),
												company_description: store_combo_Users.getById(Ext.getCmp('envolved_combo_users').getValue()).get('company_description'),
												contact_phone: store_combo_Users.getById(Ext.getCmp('envolved_combo_users').getValue()).get('contact_phone'),
												comments: store_combo_Users.getById(Ext.getCmp('envolved_combo_users').getValue()).get('comments')
					                		}
						                );
						                local_usersStore.insert(local_usersStore.getCount(), r);
						                userAdd.close();
									}
								}
							},
							{text: 'Cancel', handler: function(){ userAdd.close(); }}
						],

						items:[
							new Ext.form.FormPanel({
								id: 'form_add_users_roles',
						      	frame:true,
								title: '',
								bodyStyle: 'padding:2px 2px 0',
								style: "margin: 0px auto 0px auto;",
								autoWidth: true,
								autoHeight: true,
								monitorValid: true,
								items:[
									new Ext.form.ComboBox({
										id: 'envolved_combo_users',
										fieldLabel: 'User',
										valueField: 'id',
										displayField: 'name',
										editable: true,
										emptyText: 'select a owner...',
										store: store_combo_Users,
										mode: 'remote',
										selectOnFocus: true,
										forceSelection: true,
										triggerAction: 'all',
										minChars: 3,
										allowBlank: false,
										width: 275
									}),
									new Ext.form.ComboBox ({
										id: 'envolved_combo_roles',
									    fieldLabel: 'Role',
									    store: [[1, 'User'], [2, 'Admin']],
									    typeAhead: true,
									    mode: 'local',
									    forceSelection: true,
									    triggerAction: 'all',
									    selectOnFocus: true,
									    allowBlank: false,
										editable: false,
										width: 275
									})
								]
							})
						]
					});
					userAdd.show();
	            }
	        },
			'-',
	        	{
		            text: 'Add contacts',
	                iconCls: 'addNewIcon',
		            handler : function(){
					var contactAdd = new Ext.Window({
						id: 'contact_user_add',
						title: 'Add contacts',
						closeAction: 'close',
                        autoScroll: true,
						modal: true,
						resizable: false,
						listeners: {
							show: function(){
								this.setWidth(430);
								this.setHeight(184);
							}
						},
						buttons: [
							{text: 'OK', handler:
								function(){
									if(Ext.getCmp('form_add_contacts').getForm().isValid()){
						                var r = new Ext.data.Record(
						                	{
						                		id: 0,
						                		name: Ext.getCmp('envolved_contacts_name').getRawValue(),
						                		role_id: 0,
						                		role: '-',
												company_description: Ext.getCmp('envolved_contacts_company').getRawValue(),
												contact_phone: Ext.getCmp('envolved_contacts_phone').getRawValue(),
												comments: Ext.getCmp('envolved_contacts_comments').getRawValue()
					                		}
						                );
						                local_usersStore.insert(local_usersStore.getCount(), r);
						                contactAdd.close();
									}
								}
							},
							{text: 'Cancel', handler: function(){ contactAdd.close(); }}
						],
						items:[
							new Ext.form.FormPanel({
								id: 'form_add_contacts',
						      	frame:true,
								title: '',
								bodyStyle: 'padding:2px 2px 0',
								style: "margin: 0px auto 0px auto;",
								autoWidth: true,
								autoHeight: true,
								monitorValid: true,
								items:[
									new Ext.form.TextField({
										id: 'envolved_contacts_name',
										fieldLabel: 'Name',
										allowBlank: false,
										width: 250
									}),
									new Ext.form.TextField({
										id: 'envolved_contacts_company',
										fieldLabel: 'Company desc.',
										allowBlank: false,
										width: 250
									}),
									new Ext.form.TextField({
										id: 'envolved_contacts_phone',
										fieldLabel: 'Phone',
										allowBlank: false,
										width: 250
									}),
									new Ext.form.TextField({
										id: 'envolved_contacts_comments',
										fieldLabel: 'Comments',
										allowBlank: false,
										width: 250
									}),
								]
							})
						]
					});
					contactAdd.show();
	            }
	        },
			'-',
			{
		        text: 'Remove',
		        cls: 'btnRemover',
				handler: function() {
					var selectionModel = gridUsersRoles.getSelectionModel();
					var selectedRow = selectionModel.getSelected();
					if (selectedRow) {
		                var selIdx = gridUsersRoles.store.indexOf(selectedRow);
						gridUsersRoles.getStore().remove(selectedRow);
						selectionModel.selectRow(selIdx);
					}
				}
		    }
        ]
	});

	var form_newProjects = new Ext.form.FormPanel({
      	frame:true,
		title: 'Create a new project using the form below',
		bodyStyle: 'padding:5px 5px 0',
		style: "margin: 0px auto 0px auto;",
		width: 700,
		monitorValid: true,
		items:[{xtype:"fieldset",
		    	autoHeight:true,
		    	items:[{layout: 'column',
						items:[{labelWidth: 50,
								columnWidth:0.68,
								layout:'form',
								items:[{xtype:"textfield", fieldLabel: 'Name', name: 'project[name]', allowBlank:false, width: 360}
    					              ]
							   },
							   {labelWidth: 50,
								columnWidth:0.32,
								layout:'form',
								items:[statusCombo]
							  }]
					   },
		      		   {layout:"column",
			        	items:[{columnWidth:0.55,
			            		layout:"form",
			            		items:[comboNetworkOwners,
	            					   {xtype:'datefield', fieldLabel:"Begin date", name:"project[begin_date]", width:200}
	            				      ]
			         		   },
			         		   {labelWidth: 66,
			         		    columnWidth:0.45,
			            		layout:"form",
			            		items:[comboCustomers,
			            			   {xtype:'datefield', fieldLabel:"End date", name:"project[end_date]", width:200}
			            		      ]
		          			  }]
	      			  },
		      		   {layout:"column",
		      		    labelWidth: 70,
			            layout:"form",
			        	items:[{xtype:"textarea", fieldLabel:"Project Description", name:"project[description]",heigth:20, width:556, value: '<%= @project.description %>'}]
	      			  }]
	  		   },
			   {
			   	xtype:"fieldset",
				title:"Tests Configuration",
				autoHeight:true,
				labelWidth: 15,
				items:[
					{
						layout:"column",
			        	items:[
							{
								columnWidth:0.33,
			            		layout:"form",
			            		items:[
									{
										boxLabel: 'Attenuation (1310)',
							    		xtype: 'checkbox',
							    		name: 'project[has_test_attenuation_1310]',
							    		checked: false,
								    	inputValue: true
									}
								]
							},
							{
								columnWidth:0.33,
			            		layout:"form",
			            		items:[
									{
										boxLabel: 'OTDR (Standard)',
								    	xtype: 'checkbox',
								    	name: 'project[has_test_otdr_standard]',
								    	checked: false,
									    inputValue: true
									}
								]
							},
							{
								columnWidth:0.33,
			            		layout:"form",
			            		items:[
									{
										boxLabel: 'PMD (10 min)',
								    	xtype: 'checkbox',
								    	name: 'project[has_test_pmd_10_min]',
								    	checked: false,
									    inputValue: true
									}
								]
							}
					   	]
					},
					{
						layout:"column",
		        		items:[
							{
								columnWidth:0.33,
			            		layout:"form",
			            		items:[
									{
										boxLabel: 'Attenuation (1550)',
								    	xtype: 'checkbox',
								    	name: 'project[has_test_attenuation_1550]',
								    	checked: false,
									    inputValue: true
						      		}
								]
							},
							{
								columnWidth:0.33,
								layout:"form",
								items:[
									{
										boxLabel: 'OTDR (Premium)',
								    	xtype: 'checkbox',
								    	name: 'project[has_test_otdr_premium]',
								    	checked: false,
									    inputValue: true
							  		}
								]
							},
							{
								columnWidth:0.33,
			            		layout:"form",
			            		items:[
									{
										boxLabel: 'PMD (60 min)',
								    	xtype: 'checkbox',
								    	name: 'project[has_test_pmd_60_min]',
								    	checked: false,
									    inputValue: true
						      		}
								]
							}
				   		]
			   		},
					{
						layout:"column",
		        		items:[
							{
								columnWidth:0.33,
			            		layout:"form",
			            		items:[
									{
										boxLabel: 'Chromatic Dispersion',
								    	xtype: 'checkbox',
								    	name: 'project[has_test_chromatic]',
								    	checked: false,
									    inputValue: true
						      		}
								]
							},
							{
								columnWidth:0.33,
								layout:"form",
								items:[
									{
										boxLabel: 'ORL',
								    	xtype: 'checkbox',
								    	name: 'project[has_test_orl]',
								    	checked: false,
									    inputValue: true
							  		}
								]
							},
							{
								columnWidth:0.33,
			            		layout:"form",
			            		items:[
									{
										boxLabel: 'Site Survey',
								    	xtype: 'checkbox',
								    	name: 'project[has_test_site_survey]',
								    	checked: false,
									    inputValue: true
						      		}
								]
							}
				   		]
			   		}
					
			  	]
			},
			{xtype:"fieldset",
				title:"People envolved",
				autoHeight:true,
				labelWidth: 1,
				items: [gridUsersRoles]
			},
  		  ],
		buttons:[{text: 'Create Project',
			     handler:function(){
                 	var usersArr = [];
	                local_usersStore.each(function(record) {
	                    record.commit();
	                    usersArr.push(record.data)
	                });

					if(usersArr.length > 0){
						var params_add = {users_projects: Ext.encode(usersArr)};
					}else{
						var params_add = null;
					}

			        if (form_newProjects.getForm().isValid()){
			             form_newProjects.getForm().submit({
								params: params_add,
			             		url:'<%= url_for (:controller => 'projects', :action => 'create') %>',
	        					waitMsg:'Saving Data...',
	            				success: function(){
	            					Ext.Msg.alert('Project added','The project has been successfully created');
	              					updateSubTab('tab_projects','sub_tab_projects','Projects','<%= projects_path %>');
	              					closeSubTab('tab_projects','sub_tab_projects_new');
              					},
	            				failure: function(){
	            					Ext.Msg.alert('Error','There has been a problem while creating this request! Contact the system administrator.')
            					}
		          			 });
					 }
      			 }
			     },
			     {text: 'Cancel',
				  handler:function(){closeSubTab('tab_projects','sub_tab_projects_new');}
  			    }]
	});

	form_newProjects.render('area_form_newProjects');

</script>
<div id="area_form_newProjects" style="float:left;">
</div>