<script type="text/javascript">

	var store_combo_Project = createStore('/projects/store/grid',
									  ['id', 'name'],
									  [{name: 'id',  mapping: 'id'},
									   {name: 'name',  mapping: 'name'}
									  ]);

	var store_combo_Span = createStore('/spans/store/grid',
									  ['id', 'site_a_id', 'site_a_name', 'site_b_name', 'sitea_siteb'],
									  [{name: 'id',  mapping: 'id'},
									   {name: 'site_a_id',  mapping: 'site_a_id'},
									   {name: 'site_b_id',  mapping: 'site_b_id'},
									   {name: 'site_a_name',  mapping: 'site_a_name'},
									   {name: 'site_b_name',  mapping: 'site_b_name'},
									   {name: 'sitea_siteb',  mapping: 'sitea_siteb'}
									  ]);

	var comboProjects = new Ext.form.ComboBox({
		fieldLabel: 'Project',
		valueField: 'id',
		displayField: 'name',
		editable: true,
		emptyText: 'Select a Project...',
		store: store_combo_Project,
		mode: 'remote',
		selectOnFocus: true,
		forceSelection: true,
		triggerAction: 'all',
		minChars: 3,
		allowBlank: true
	});

	var comboSpans = new Ext.form.ComboBox({
		fieldLabel: 'Span',
		valueField: 'id',
		displayField: 'sitea_siteb' ,
		editable: true,
		emptyText: 'Select a Span...',
		store: store_combo_Span,
		mode: 'remote',
		selectOnFocus: true,
		forceSelection: true,
		triggerAction: 'all',
		minChars: 3,
		allowBlank: false,
		disabled: true,
        name: 'cable[span_id]',
        hiddenName: 'cable[span_id]'
	});

	var networkTypeCombo =
		new Ext.form.ComboBox ({
		    fieldLabel: 'Network Type',
		    store: [['1', 'Subterran'],['2', 'Aerial'],['3', 'Submarine'],['4', 'Other']],
		    typeAhead: true,
		    mode: 'local',
		    forceSelection: true,
		    triggerAction: 'all',
		    selectOnFocus: true,
		    hiddenName: 'cable[network_type]',
		    allowBlank: true,
			editable: false,
			emptyText: 'Set Network Type...',
			width: 200
		});

	comboProjects.on('select', function(combo, record, index) {
      comboSpans.setDisabled(false);
	  comboSpans.reset();
	  comboSpans.store.proxy = new Ext.data.HttpProxy({
	    method: 'GET',
	    url: '/spans/store/grid?project_id='+record.get('id')
	  });
	  comboSpans.store.load();
	});

    var form_newCables = new Ext.FormPanel
	    ({labelWidth: 100,
	      frame:true,
	      title: 'Create a new cable using the form below',
	      bodyStyle:'padding:5px 5px 0',
	      style: "margin: 0px auto 0px auto;",
	      width: 500,
	      defaultType: 'textfield',
	      monitorValid: true,
	      items: [{xtype:"fieldset",
                   title:"Cable",
                   autoHeight: true,
                   width: 476,
                   defaults: {width: 325},
                   items:[comboProjects, comboSpans,
				          {xtype:'textfield', fieldLabel: 'Cable Name', name: 'cable[name]', allowBlank:false},
				          networkTypeCombo
		                 ]
                 }],
      		buttons:[{
      		          text: 'Create Cable',
	                  handler:function()
	                    {if (form_newCables.getForm().isValid())
	                        {form_newCables.getForm().submit
	                          ({url:'<%= url_for (:controller => 'cables', :action => 'create') %>',
	                            waitMsg:'Saving Data...',
	                            success: function(){
	                                Ext.Msg.alert('Cable added','The cable has been successfully created');
	                                updateSubTab('tab_cables','sub_tab_cables','Cables','<%= cables_path %>');
	                                closeSubTab('tab_cables','sub_tab_cables_new');},
	                            failure: function(form, action)
	                               {if (action.failureType == 'server')
	                                   {msg = String(Ext.util.JSON.decode(action.response.responseText));
	                                    Ext.Msg.alert('Validation Error', msg);}
	                                else
	                                   {Ext.Msg.alert('Error', 'There has been a problem while creating this request. Contact the system administrator.');}
	                               }
 	                         });
 	                       }
 	                   }
 	                },
 	                {text: 'Cancel',
 	                 handler:function(){closeSubTab('tab_cables','sub_tab_cables_new');}
 	               }]
	    });
    form_newCables.render( 'area_form_newCables');

</script>
<br/>
<div id="area_form_newCables" style="float:left;"></div>